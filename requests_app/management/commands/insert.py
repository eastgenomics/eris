
"""This script (called within seed.py) defines how cleaned data from
either panelapp or a request form is inserted into the database models.

The data passed to this script (generated by either parse_pa or
parse_form) should be a dict with the keys:

{
'panel_source',
'external_id',
'panel_version',
'genes' : [
    'transcript',
    'hgnc_id',
    'confidence_level',
    'mode_of_inheritance',
    'mode_of_pathogenicity',
    'penetrance',
    'gene_justification',
    'transcript_justification',
    ],
'regions' : [
    'confidence_level',
    'mode_of_inheritance',
    'mode_of_pathogenicity',
    'penetrance',
    'name',
    'chrom',
    'start_37',
    'end_37',
    'start_38',
    'end_38',
    'type',
    'haploinsufficiency',
    'triplosensitivity',
    'required_overlap',
    'variant_type',
    'justification',
    ],
}

"""


from requests_app.models import (
    ClinicalIndication,
    ClinicalIndicationSource,
    ReferenceGenome,
    Panel,
    ClinicalIndicationPanel,
    ClinicalIndicationPanelUsage,
    Hgnc,
    Gene,
    Confidence,
    Penetrance,
    ModeOfInheritance,
    ModeOfPathogenicity,
    PanelGene,
    Transcript,
    PanelGeneTranscript,
    Haploinsufficiency,
    Triplosensitivity,
    RequiredOverlap,
    VariantType,
    Region,
    PanelRegion,
    RegionAnnotation)


def insert_data(parsed_data):

    # create two ReferenceGenome instances
    ref_genome_37, created = ReferenceGenome.objects.get_or_create(
        reference_build = 'GRCh37')

    ref_genome_38, created = ReferenceGenome.objects.get_or_create(
        reference_build = 'GRCh38')

    # create two Panel instances, one for each reference
    panel_37, created = Panel.objects.get_or_create(
        external_id = parsed_data['external_id'],
        panel_source = parsed_data['panel_source'],
        panel_version = parsed_data['panel_version'],
        reference_genome_id = ref_genome_37
        )

    panel_38, created = Panel.objects.get_or_create(
        external_id = parsed_data['external_id'],
        panel_source = parsed_data['panel_source'],
        panel_version = parsed_data['panel_version'],
        reference_genome_id = ref_genome_38
        )

    # for each panel gene, create relevant model instances
    for single_gene in parsed_data['genes']:

        hgnc, created = Hgnc.objects.get_or_create(
            id = single_gene['hgnc_id'],
            )

        gene, created = Gene.objects.get_or_create(
            hgnc_id = hgnc,
            )

        confidence, created = Confidence.objects.get_or_create(
            confidence_level = single_gene['confidence_level'],
            )

        moi, created = ModeOfInheritance.objects.get_or_create(
            mode_of_inheritance = single_gene['mode_of_inheritance'],
            )

        mop, created = ModeOfPathogenicity.objects.get_or_create(
            mode_of_pathogenicity = single_gene['mode_of_pathogenicity'],
            )

        penetrance, created = Penetrance.objects.get_or_create(
            penetrance = single_gene['penetrance'],
            )

        transcript, created = Transcript.objects.get_or_create(
            refseq_id = single_gene['transcript'],
            )

        # link the gene to both panel instances (37 and 38)
        for panel_instance in panel_37, panel_38:

            panel_gene, created = PanelGene.objects.get_or_create(
                panel_id = panel_instance,
                gene_id = gene,
                confidence_id = confidence,
                moi_id = moi,
                mop_id = mop,
                penetrance_id = penetrance,
                justification = single_gene['gene_justification'],
                )

            # link each PanelGene instance to the appropriate transcript
            panel_gene_transcript, created = PanelGeneTranscript.objects\
                .get_or_create(
                    panel_gene_id = panel_gene,
                    transcript_id = transcript,
                    justification = single_gene['transcript_justification'],
                    )

    # for each panel region, create relevant model instances
    for single_region in parsed_data['regions']:

        confidence, created = Confidence.objects.get_or_create(
            confidence_level = single_region['confidence_level'],
            )

        moi, created = ModeOfInheritance.objects.get_or_create(
            mode_of_inheritance = single_region['mode_of_inheritance'],
            )

        mop, created = ModeOfPathogenicity.objects.get_or_create(
            mode_of_pathogenicity = single_region['mode_of_pathogenicity'],
            )

        penetrance, created = Penetrance.objects.get_or_create(
            penetrance = single_region['penetrance'],
            )

        vartype, created = VariantType.objects.get_or_create(
            variant_type = single_region['variant_type'],
            )

        overlap, created = RequiredOverlap.objects.get_or_create(
            required_overlap = single_region['required_overlap'],
            )

        haplo, created = Haploinsufficiency.objects.get_or_create(
            haploinsufficiency = single_region['haploinsufficiency'],
            )

        triplo, created = Triplosensitivity.objects.get_or_create(
            triplosensitivity = single_region['triplosensitivity'],
            )

        # create ref genome 37/38-specific region instances, and link each
        # panel to the appropriate instance

        for panel_instance in panel_37, panel_38:

            if panel_instance == panel_37:

                region, created = Region.objects.get_or_create(
                    name = single_region['name'],
                    chrom = single_region['chrom'],
                    start = single_region['start_37'],
                    end = single_region['end_37'],
                    type = single_region['type'],
                    )

            elif panel_instance == panel_38:

                region, created = Region.objects.get_or_create(
                    name = single_region['name'],
                    chrom = single_region['chrom'],
                    start = single_region['start_38'],
                    end = single_region['end_38'],
                    type = single_region['type'],
                    )

            panel_region, created = PanelRegion.objects.get_or_create(
                panel_id = panel_instance,
                confidence_id = confidence,
                moi_id = moi,
                mop_id = mop,
                penetrance_id = penetrance,
                region_id = region,
                haplo_id = haplo,
                triplo_id = triplo,
                overlap_id = overlap,
                vartype_id = vartype,
                justification = region['justification'],
                )
